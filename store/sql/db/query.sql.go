// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO "profile" (user_id, first_name, last_name)
VALUES ( $1, $2, $3 )
RETURNING id, user_id, first_name, last_name, created_at, updated_at
`

type CreateProfileParams struct {
	UserID    int32
	FirstName string
	LastName  string
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile, arg.UserID, arg.FirstName, arg.LastName)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (username, email, password)
VALUES ( $1, $2, $3 )
RETURNING id, username, email, password, created_at, updated_at
`

type CreateUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfileByUserID = `-- name: GetProfileByUserID :one
SELECT id, user_id, first_name, last_name, created_at, updated_at FROM "profile"
WHERE user_id = $1
`

func (q *Queries) GetProfileByUserID(ctx context.Context, userID int32) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileByUserID, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, created_at, updated_at FROM "user"
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, created_at, updated_at FROM "user"
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE "profile" SET first_name = $1, last_name = $2, updated_at = CURRENT_TIMESTAMP
WHERE user_id = $3
RETURNING id, user_id, first_name, last_name, created_at, updated_at
`

type UpdateProfileParams struct {
	FirstName string
	LastName  string
	UserID    int32
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfile, arg.FirstName, arg.LastName, arg.UserID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user" SET email = $1, password = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $3
RETURNING id, username, email, password, created_at, updated_at
`

type UpdateUserParams struct {
	Email    string
	Password string
	ID       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Email, arg.Password, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
